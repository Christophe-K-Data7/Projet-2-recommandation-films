
import streamlit as st
import pandas as pd
import base64
import requests
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
import numpy as np
import time 

df_final = pd.read_csv("df_final_id.csv")

# Fonction pour rechercher un film par son nom
def search_movie(title):
    url = "https://api.themoviedb.org/3/search/movie"
    params = {
        "api_key": "d6e046b00186d5cc2135e145fb7af15e",  # Votre cl√© API TMDb
        "query": title
    }
    response = requests.get(url, params=params)
    return response.json()

def main():
    # D√©finir le style CSS global
    set_global_styles()

    # D√©finir l'image de fond pour la barre lat√©rale
    side_bg = "falling-popcorn-redwhite-stripes-box-blue-background.jpg"#####################################################
    set_sidebar_background(side_bg)

    st.sidebar.title("Navigation")
    page = st.sidebar.selectbox("Choisissez une page", ["Accueil", "Pr√©sentations Ali & Son's", "Soir√©e en t√™te √† t√™te avec...", "Un genre, mille plaisirs", "Mon film, mon aventure","Dur√©e id√©ale pour s'√©vader"])

    if page == "Accueil":
        show_home()
    elif page == "Pr√©sentations Ali & Son's":
        show_page1()
    elif page == "Soir√©e en t√™te √† t√™te avec...":
        show_page2()
    elif page == "Un genre, mille plaisirs":
        show_page3()
    elif page == "Mon film, mon aventure":
        show_page4()
    elif page == "Dur√©e id√©ale pour s'√©vader":
        show_page5()


def set_global_styles():
    # CSS pour l'image de fond de la barre lat√©rale et la couleur de fond du contenu principal
    side_bg = "falling-popcorn-redwhite-stripes-box-blue-background.jpg"#####################################################
    side_bg_ext = 'data:image/jpg;base64,{}'.format(base64.b64encode(open(side_bg, "rb").read()).decode())
    
    st.markdown(f"""
        <style>
        .stApp {{
            background-color: #F6DEB9;
        }}
        .css-1d391kg {{
            background-image: url("{side_bg_ext}");
            background-size: cover;
        }}
        .st-bb {{
            background-color: rgba(246, 222, 185, 0.5);
        }}
        </style>
    """, unsafe_allow_html=True)

def progress_bar_animation():
    # Centrer verticalement et horizontalement la barre de progression
    col1, col2, col3 = st.columns([1, 2, 1])

    # Espacement pour centrer verticalement
    col1.write("")
    col3.write("")

    # Barre de progression au centre
    with col2:
        progress_bar = st.progress(0)

    # Styles CSS pour rendre la barre de progression transparente
    st.markdown(
        """
        <style>
        .stProgress > div > div {
            background-color: transparent;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    # Fonction pour simuler une t√¢che longue
    def simulate_long_task():
        for i in range(100):
            progress_bar.progress(i + 1)
            time.sleep(0.05)  # Simulation d'une t√¢che longue

    # Appeler la fonction de simulation
    simulate_long_task()

def show_home():
    title_html = """
    <h1 style="text-align: center;">
        Bienvenue sur la page officielle<br>
        <span style="display: inline-block; margin-top: 10px;">d'Ali & Son's</span>
    </h1>
    """
    st.markdown(title_html, unsafe_allow_html=True)

    # Int√©grer un fichier audio MP3 en boucle
    #st.audio("https://ia804508.us.archive.org/20/items/keys-of-moon-the-epic-hero/KeysOfMoon-TheEpicHero.mp3", format="audio/mpeg", start_time=0, loop=True)

    # Int√©grer un fichier vid√©o MP4 local et le faire tourner en boucle
    #with open('/Users/alisson/Desktop/7989632-uhd_2160_4096_25fps.mp4', 'rb') as video_file:#####################################################
        #video_bytes = video_file.read()
        #st.video(video_bytes, format='video/mp4', start_time=0, loop=True)

    ################################ PAGE 1 pr√©sentation #############################

def show_page1():
    st.title("Pr√©sentations Ali & Son's")
    markdown_text = """
    ## üé• Pourquoi Ali & Son's ?

    Parce que nous savons que regarder un film, c'est bien plus qu'une simple activit√© de loisir. C'est une aventure, un moment de d√©tente, et parfois m√™me une le√ßon de vie. Et tout √ßa, nous le faisons avec un soup√ßon d'humour, beaucoup de pop-corn et une grande dose de passion !

    ## üçø Nos √âquipements :

    - **√âcran XXL** : Si grand qu'on pourrait y voir passer un troupeau de moutons !
    - **Son Dolby Atmos** : Tellement immersif que vous entendrez les oiseaux chanter m√™me pendant un film d'horreur.
    - **Fauteuils Ultra-Confort** : R√©put√©s pour √™tre plus confortables que le canap√© de votre grand-m√®re, et √ßa, c'est pas peu dire !

    ## üé¨ Notre S√©lection de Films :
    Des blockbusters aux films d'auteurs, en passant par les com√©dies locales et les documentaires animaliers (parce qu'on sait que les vaches aiment aussi le cin√©ma), il y en a pour tous les go√ªts.

    ## üç¶ C√¥t√© Gourmandises :
    Notre stand de friandises est une attraction √† lui seul. Pop-corn, bonbons, glaces, et m√™me quelques sp√©cialit√©s locales pour ravir vos papilles. Parce qu'un film sans grignoter, c'est comme la Creuse sans ses champs verdoyants, √ßa manque de saveur !

    ## üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Chez Ali & Son's, tout le monde est le bienvenu :
    Que vous soyez venu en famille, entre amis, ou en solitaire pour une session de cin√©-th√©rapie, vous trouverez toujours un accueil chaleureux chez nous. Et n'oubliez pas notre mascotte, Gustave le sanglier, toujours pr√™t pour une s√©ance photo √† l'entr√©e du cin√©ma !

    Alors, n'attendez plus, venez faire un tour chez Ali & Son's. Ici, le cin√©ma, c'est plus qu'un loisir, c'est un v√©ritable spectacle !

    ## üìÖ Horaires : 
    Ouvert tous les jours, m√™me quand il pleut des cordes (et en Creuse, on sait que √ßa arrive souvent !)

    ## üìç Adresse : 
    En plein centre-ville, impossible de nous manquer (juste suivez les panneaux avec Gustave le sanglier)

    ## Ali & Son's : 
    Le cin√©ma o√π l'on rit, o√π l'on pleure, et o√π l'on vit des moments inoubliables, au c≈ìur de la Creuse. üéâ

    Venez nombreux, et n'oubliez pas : chez Ali & Son's, le pop-corn est toujours chaud et l'humour toujours au rendez-vous !
    """
    st.markdown(markdown_text)

################################ PAGE 2 reco acteur #############################

def show_page2():
    st.title("Syst√®me de recommandation avec l'acteur favori")

    markdown_text = """
    
    üé¨ Quel est votre acteur pr√©f√©r√© ?

    Chez Ali & Son's, nous croyons que chaque film devient encore plus magique gr√¢ce aux talents exceptionnels des acteurs. üé•

    Dites-nous, quel acteur fait battre votre c≈ìur et illumine vos √©crans ? üåü

    Partagez avec nous le nom de votre acteur pr√©f√©r√© et d√©couvrez des recommandations de films sp√©cialement s√©lectionn√©es pour vous ! üçø‚ú®
    
    """
    st.markdown(markdown_text)

    input_acteur = st.text_input('Quel est votre acteur favori ? :').lower()

    if input_acteur:
        films_de_lacteur = df_final[df_final['primaryName'] == input_acteur]
        films_de_lacteur_unique = films_de_lacteur.drop_duplicates(subset=['primaryTitle'])

        if len(films_de_lacteur_unique) > 0:
            random_films_acteur = films_de_lacteur_unique.sample(n=3)
            st.write(f"Voici trois films dans lesquels {input_acteur} a jou√© :")
            for i, film in random_films_acteur.iterrows():
                st.write(film['primaryTitle'])
        else:
            st.write(f"Aucun film trouv√© pour l'acteur {input_acteur}.")


################################ PAGE 3 reco genre #############################

def show_page3():
    st.title("Un genre, mille plaisirs")

    markdown_text = """
    üé¨ Quel est votre genre de film pr√©f√©r√© ?

    Chez Ali & Son's, nous savons que chacun a ses propres go√ªts cin√©matographiques. üé•

    Que vous soyez amateur de com√©dies hilarantes, de thrillers palpitants, de drames √©mouvants ou de science-fiction captivante, nous voulons tout savoir ! üåü

    Partagez avec nous votre genre de film pr√©f√©r√© et laissez-nous vous recommander des p√©pites cin√©matographiques qui vous feront vibrer. üçø‚ú®
    """
    st.markdown(markdown_text)
    
    input_genre = st.text_input('Quel genre de film aimez-vous ? :').lower()

    if input_genre:
        genre_souhaite = df_final[df_final['genres'].str.contains(input_genre, case=False, na=False)]
        genre_souhaite_unique = genre_souhaite.drop_duplicates(subset=['primaryTitle'])

        if len(genre_souhaite_unique) > 0:
            random_films = genre_souhaite_unique.sample(n=3)
            st.write(f"Voici trois films du genre {input_genre} :")
            for i, film in random_films.iterrows():  
                st.write(film['primaryTitle'])
        else:
            st.write(f"Aucun film trouv√© pour le genre {input_genre}.")



################################ PAGE 4 reco film Kmeans #############################

def show_page4():
    st.title("Mon film, mon aventure")

    markdown_text = """
    üé¨ Quel est le titre de votre film pr√©f√©r√© ?

    Chez Ali & Son's, nous adorons conna√Ætre les coups de c≈ìur cin√©matographiques de nos visiteurs ! üåü

    Dites-nous, quel est le film qui vous a le plus marqu√©, fait rire, pleurer ou r√™ver ? üé•

    Partagez avec nous le titre de votre film pr√©f√©r√© et laissez-nous vous surprendre avec des recommandations personnalis√©es ! üçø‚ú®
    """
    st.markdown(markdown_text)

    df_final = pd.read_csv("df_final.csv")

    # Pour remplacer les NaN par 0 dans le get dummies 
    df_final = df_final.fillna(0)

    # Demande d'entr√©e utilisateur
    input_film = st.text_input('Entrez le titre de votre film pr√©f√©r√© :').lower()

    if st.button("Rechercher"):
        if input_film:
            movie_data = search_movie(input_film)
            if movie_data["total_results"] > 0:
                first_movie = movie_data["results"][0]
                # Affichez les d√©tails du film
                st.write("Titre:", first_movie["title"])
                st.write("Ann√©e de sortie:", first_movie["release_date"])
                st.write("Description:", first_movie["overview"])
                # V√©rifiez si l'affiche du film est disponible
                if first_movie["poster_path"]:
                    # Construisez l'URL de l'affiche
                    poster_url = f"https://image.tmdb.org/t/p/w500{first_movie['poster_path']}"
                    # Affichez l'affiche
                    st.image(poster_url, caption="Affiche du film", use_column_width=True)
                else:
                    st.write("Affiche non disponible")
            else:
                st.write("Aucun r√©sultat trouv√© pour ce titre")

    if input_film:
        # Regrouper les films par titre pour √©viter les doublons
        #df_final_unique = df_final.groupby('primaryTitle').mean().reset_index()
        numeric_columns = df_final.select_dtypes(include=['int64', 'float64']).columns.tolist()
        numeric_columns.append('primaryTitle')
        df_final_unique = df_final[numeric_columns].groupby('primaryTitle').mean().reset_index()
        # G√©rer les valeurs manquantes
        df_final_unique = df_final_unique.fillna(df_final_unique.mean())

        # S√©lectionner les lignes num√©riques
        X = df_final_unique.select_dtypes('number')

        # Normalisation - Pr√©paration des donn√©es pour le mod√®le k-Means
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # Cr√©er le mod√®le K-means avec 20 clusters
        kmeans = KMeans(n_clusters=20, random_state=42)
        kmeans.fit(X_scaled)

        # Caract√©ristiques du film d'entr√©e
        caracteristiques_film = df_final_unique[df_final_unique['primaryTitle'].str.lower() == input_film].select_dtypes('number')

        # V√©rifier que les caract√©ristiques du film donn√© ne sont pas vides
        if not caracteristiques_film.empty:
            # Applique la m√™me transformation au film donn√© en input
            caracteristiques_film_scaled = scaler.transform(caracteristiques_film)
            cluster_input_film = kmeans.predict(caracteristiques_film_scaled)[0]

            # Trouver les films dans le m√™me groupe que le film donn√©
            films_meme_groupe = df_final_unique[kmeans.labels_ == cluster_input_film]

            # S√©lectionner 3 films al√©atoires dans le m√™me cluster que le film donn√© (√† l'exclusion du film donn√©)
            num_similaires = min(3, len(films_meme_groupe) - 1)
            if num_similaires > 0:
                indices_similaires = np.random.choice(films_meme_groupe.index, num_similaires, replace=False)
                similar_films = films_meme_groupe.loc[indices_similaires, 'primaryTitle']
                st.write(f"Les films similaires √† '{input_film}' dans le m√™me cluster sont :")
                for i, similar_film in enumerate(similar_films):
                    st.write(f"{i+1}. {similar_film}")
            else:
                st.write(f"Aucun film similaire √† '{input_film}' n'a √©t√© trouv√© dans le m√™me cluster.")
        else:
            st.write(f"Le film '{input_film}' n'a pas √©t√© trouv√© dans la base de donn√©es.")



################################ PAGE  reco dur√©e linear regression #############################

def show_page5():
    st.title("Dur√©e id√©ale pour s'√©vader")

    markdown_text = """ 
    üé¨ Combien de temps avez-vous pour un bon film ?

    Chez Ali & Son's, nous savons que chaque minute compte. ‚è∞

    Que vous ayez juste une petite heure ou tout un apr√®s-midi √† consacrer √† une s√©ance de cin√©ma, nous avons le film parfait pour vous ! üåü

    Dites-nous combien de temps vous souhaitez consacrer √† votre film, et laissez-nous vous surprendre avec des recommandations adapt√©es. üçø‚ú®
    """
    st.markdown(markdown_text)

    df_final = pd.read_csv("df_final.csv")

    # Pour remplacer les NaN par 0 dans le get dummies 
    df_final = df_final.fillna(0)

    # Demande d'entr√©e utilisateur pour la dur√©e souhait√©e du film
    input_temps = st.number_input("Quelle dur√©e souhaitez-vous accorder √† votre film aujourd'hui ? (en minutes) :", min_value=0, max_value=500, step=10)

    if input_temps > 0:
        # Regrouper les films par titre pour √©viter les doublons
        df_final_unique = df_final.groupby('primaryTitle').mean().reset_index()

        # G√©rer les valeurs manquantes
        df_final_unique = df_final_unique.fillna(df_final_unique.mean())

        # S√©lectionner les lignes num√©riques
        X = df_final_unique.select_dtypes('number').drop(columns=['runtimeMinutes'])

        # Normalisation - Pr√©paration des donn√©es pour le mod√®le de R√©gression Lin√©aire 
        scaler = StandardScaler().fit(X)
        X_scaled = scaler.transform(X)

        # Entra√Ænement du mod√®le de r√©gression lin√©aire
        modelLR = LinearRegression().fit(X_scaled, df_final_unique['runtimeMinutes'])

        # Pr√©dire les dur√©es de films √† partir de la variable X normalis√©e 
        predicted_durations = modelLR.predict(X_scaled)

        # Cr√©ation d'une nouvelle colonne avec les pr√©dictions du runtimeMinutes
        df_final_unique['predicted_runtimeMinutes'] = predicted_durations

        # Filtrer les films dont la dur√©e pr√©dite est proche du nombre mis en input
        tolerance = 10  # Tol√©rance de 10 minutes
        films_filtres = df_final_unique[np.abs(df_final_unique['predicted_runtimeMinutes'] - input_temps) <= tolerance]

        # V√©rifier que les caract√©ristiques de dur√©e de film ne sont pas vides
        if not films_filtres.empty:
            st.write(f"Les films qui ont une dur√©e approximative de {input_temps} minutes sont :")
            num_similaires = min(3, len(films_filtres))
            random_indices = np.random.choice(films_filtres.index, num_similaires, replace=False)
            for i, idx in enumerate(random_indices):
                similar_film = films_filtres.loc[idx, 'primaryTitle']
                poster_path = df_final.loc[df_final['primaryTitle'] == similar_film, 'poster_path'].iloc[0]
                poster_url = f"https://image.tmdb.org/t/p/w780/{poster_path}"
                st.write(f"{i+1}. {similar_film}")

                if isinstance(poster_url, str):  # V√©rifier si poster_url est une cha√Æne de caract√®res (URL valide)
                    st.image(poster_url, caption=similar_film, width=200)
                else:
                    st.write(f"Le poster pour le film '{similar_film}' n'est pas disponible.")
        else:
            st.write(f"Aucun film avec une dur√©e approximative de {input_temps} minutes n'a √©t√© trouv√© dans la base de donn√©es.")


def set_sidebar_background(image_path):
    with open(image_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode()

    st.markdown(
        f"""
        <style>
        [data-testid="stSidebar"] > div:first-child {{
            background-image: url("data:image/jpeg;base64,{encoded_string}");
            background-size: cover;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()